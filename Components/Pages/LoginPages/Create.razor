@page "/logins/create"
@using Microsoft.EntityFrameworkCore
@using Project.Models
@inject IDbContextFactory<Project.Data.ProjectContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1 class="text-center">Create</h1>

<h2 class="text-center">Login</h2>
<hr />

<div class="d-flex justify-content-center align-items-center" style="min-height: 80vh;">
    <div class="card shadow-lg p-4 border-primary" style="width: 30rem;">
        <div class="card-body">
            <EditForm method="post" Model="Login" OnValidSubmit="AddLogin" FormName="create" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />

                <div class="mb-3">
                    <label for="prn" class="form-label">PRN:</label>
                    <InputNumber id="prn" @bind-Value="Login.prn" class="form-control" />
                    <ValidationMessage For="() => Login.prn" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="password" class="form-label">Password:</label>
                    <InputText id="password" type="password" @bind-Value="Login.password" class="form-control" />
                    <ValidationMessage For="() => Login.password" class="text-danger" />
                </div>

                <div class="d-flex justify-content-center">
                    <button type="submit" class="btn btn-primary px-4">Create</button>
                </div>
            </EditForm>

            @if (!string.IsNullOrEmpty(SuccessMessage))
            {
                <div class="alert alert-success mt-3 text-center">@SuccessMessage</div>
            }
        </div>
    </div>
</div>

<div class="text-center mt-3">
    <a href="/logins" class="btn btn-outline-secondary">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Login Login { get; set; } = new();

    private string SuccessMessage { get; set; } = string.Empty;

    private async Task AddLogin()
    {
        using var context = DbFactory.CreateDbContext();
        context.Login.Add(Login);
        await context.SaveChangesAsync();
        SuccessMessage = "Data has been successfully added!";

        // Clear the form after submission
        Login = new Login();
    }
}
